//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FwUpdateApiSample {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FwUpdateApiSample.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image provided is not signed. Therefore rejected..
        /// </summary>
        public static string AuthFailed {
            get {
                return ResourceManager.GetString("AuthFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image file doesn&apos;t fit into chip size..
        /// </summary>
        public static string ChipSizeError {
            get {
                return ResourceManager.GetString("ChipSizeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please wait for firmware update process to complete..
        /// </summary>
        public static string CloseDuringUpdate {
            get {
                return ResourceManager.GetString("CloseDuringUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command not found.
        /// </summary>
        public static string CommandNotFound {
            get {
                return ResourceManager.GetString("CommandNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command is not supported on devices.
        /// </summary>
        public static string CommandNotSupportedOnDevice {
            get {
                return ResourceManager.GetString("CommandNotSupportedOnDevice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in command finding (probably an error in command table).
        /// </summary>
        public static string CommandTableError {
            get {
                return ResourceManager.GetString("CommandTableError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command is deprecated.
        /// </summary>
        public static string DeprecatedMethod {
            get {
                return ResourceManager.GetString("DeprecatedMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The new PD version on your device controller is different from the previous PD version. In order to complete the upgrade you must disconnect and unplug the device..
        /// </summary>
        public static string DeviceNeedsPowerDownMessage {
            get {
                return ResourceManager.GetString("DeviceNeedsPowerDownMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This device doesn&apos;t support device firmware update.
        /// </summary>
        public static string DeviceNotSupported {
            get {
                return ResourceManager.GetString("DeviceNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Driver API unknown.
        /// </summary>
        public static string DriverAPIUnknown {
            get {
                return ResourceManager.GetString("DriverAPIUnknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Got an error while communicating with the UWD driver.
        /// </summary>
        public static string DriverCommunicationError {
            get {
                return ResourceManager.GetString("DriverCommunicationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The controller and the file differ regarding DROM existence (one of them has it and one doesn&apos;t).
        /// </summary>
        public static string DromMismatchError {
            get {
                return ResourceManager.GetString("DromMismatchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No DROM found.
        /// </summary>
        public static string DromNotFound {
            get {
                return ResourceManager.GetString("DromNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This controller doesn&apos;t support device firmware update.
        /// </summary>
        public static string EPUpdateNotSupported {
            get {
                return ResourceManager.GetString("EPUpdateNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File does not exist..
        /// </summary>
        public static string FileNotExists {
            get {
                return ResourceManager.GetString("FileNotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Firmware update failed..
        /// </summary>
        public static string FWUpdateFailedMessage {
            get {
                return ResourceManager.GetString("FWUpdateFailedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Firmware was updated successfully..
        /// </summary>
        public static string FWUpdateSuccessMessage {
            get {
                return ResourceManager.GetString("FWUpdateSuccessMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A timeout has expired while FW update was performed..
        /// </summary>
        public static string FWUpdateTimeout {
            get {
                return ResourceManager.GetString("FWUpdateTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while getting the firmware version.
        /// </summary>
        public static string GetFirmwareVersionFailed {
            get {
                return ResourceManager.GetString("GetFirmwareVersionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while getting the PD firmware version.
        /// </summary>
        public static string GetPdVersionFailed {
            get {
                return ResourceManager.GetString("GetPdVersionFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The new PD version on your machine is different from the previous PD version. In order to complete the upgrade you must put your computer in G3 mode (shut down completely and unplug)..
        /// </summary>
        public static string HostNeedsPowerDownMessage {
            get {
                return ResourceManager.GetString("HostNeedsPowerDownMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to I2C access is not supported.
        /// </summary>
        public static string I2CAccessNotSupported {
            get {
                return ResourceManager.GetString("I2CAccessNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image file is for device controller.
        /// </summary>
        public static string ImageForDeviceError {
            get {
                return ResourceManager.GetString("ImageForDeviceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image file is for host controller.
        /// </summary>
        public static string ImageForHostError {
            get {
                return ResourceManager.GetString("ImageForHostError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error during firmware update. Please make sure device stays connected and the image is signed..
        /// </summary>
        public static string ImageWriteError {
            get {
                return ResourceManager.GetString("ImageWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Firmware image file is not compatible with controller hardware generation.
        /// </summary>
        public static string IncompatibleHWGeneration {
            get {
                return ResourceManager.GetString("IncompatibleHWGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Firmware image file is not compatible with controller port count.
        /// </summary>
        public static string IncompatiblePortCount {
            get {
                return ResourceManager.GetString("IncompatiblePortCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong number of arguments for this command.
        /// </summary>
        public static string IncorrectArgumentCount {
            get {
                return ResourceManager.GetString("IncorrectArgumentCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more of the provided arguments are invalid.
        /// </summary>
        public static string InvalidArgument {
            get {
                return ResourceManager.GetString("InvalidArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided controller ID is invalid..
        /// </summary>
        public static string InvalidControllerID {
            get {
                return ResourceManager.GetString("InvalidControllerID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided device UUID is invalid..
        /// </summary>
        public static string InvalidDeviceUUID {
            get {
                return ResourceManager.GetString("InvalidDeviceUUID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Selected file is invalid.
        ///Please select a valid image file..
        /// </summary>
        public static string InvalidImageFile {
            get {
                return ResourceManager.GetString("InvalidImageFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load Thunderbolt(TM) controllers..
        /// </summary>
        public static string LoadControllersFailed {
            get {
                return ResourceManager.GetString("LoadControllersFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load Thunderbolt(TM) devices..
        /// </summary>
        public static string LoadDevicesFailed {
            get {
                return ResourceManager.GetString("LoadDevicesFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mask isn&apos;t supported for data with length &gt; 1..
        /// </summary>
        public static string MaskIsntSupported {
            get {
                return ResourceManager.GetString("MaskIsntSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thunderbolt(TM) Firmware Update Utility.
        /// </summary>
        public static string MessageBoxCaption {
            get {
                return ResourceManager.GetString("MessageBoxCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only minimal validation was done to the image file because the controller is in safe mode.
        /// </summary>
        public static string MinimalValidationInSafeMode {
            get {
                return ResourceManager.GetString("MinimalValidationInSafeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image file is for another product model.
        /// </summary>
        public static string ModelMismatchError {
            get {
                return ResourceManager.GetString("ModelMismatchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one handle open during FW Update.
        /// </summary>
        public static string MultiHandleOpenDuringFWUpdate {
            get {
                return ResourceManager.GetString("MultiHandleOpenDuringFWUpdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple files found.
        /// </summary>
        public static string MultipleImagesFound {
            get {
                return ResourceManager.GetString("MultipleImagesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Native/BIOS-Assisted mode mismatch between the controller and the image file.
        /// </summary>
        public static string NativeModeMismatch {
            get {
                return ResourceManager.GetString("NativeModeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No command supplied.
        /// </summary>
        public static string NoCommandSupplied {
            get {
                return ResourceManager.GetString("NoCommandSupplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No active Thunderbolt(TM) controller found in the system.
        /// </summary>
        public static string NoControllerStringPart0 {
            get {
                return ResourceManager.GetString("NoControllerStringPart0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to or Thunderbolt(TM) software is not present in the system.
        ///Make sure you have Thunderbolt(TM) software installed..
        /// </summary>
        public static string NoDeviceStringPart1 {
            get {
                return ResourceManager.GetString("NoDeviceStringPart1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Then connect Thunderbolt(TM) device and retry..
        /// </summary>
        public static string NoDeviceStringPart2CMD {
            get {
                return ResourceManager.GetString("NoDeviceStringPart2CMD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Then connect Thunderbolt(TM) device and press OK to retry or press Cancel to abort firmware update process..
        /// </summary>
        public static string NoDeviceStringPart2GUI {
            get {
                return ResourceManager.GetString("NoDeviceStringPart2GUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file doesn&apos;t include DROM section.
        /// </summary>
        public static string NoDromInFileError {
            get {
                return ResourceManager.GetString("NoDromInFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning: no DROM existing (no vendor/model check).
        /// </summary>
        public static string NoDromWarning {
            get {
                return ResourceManager.GetString("NoDromWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no usable Thunderbolt(TM) device connected to the system.
        /// </summary>
        public static string NoEPStringPart0 {
            get {
                return ResourceManager.GetString("NoEPStringPart0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This controller doesn&apos;t support device firmware update.
        /// </summary>
        public static string NoEPUpdateSupport {
            get {
                return ResourceManager.GetString("NoEPUpdateSupport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hardware information is not available.
        /// </summary>
        public static string NoHWInfo {
            get {
                return ResourceManager.GetString("NoHWInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No matching devices found.
        /// </summary>
        public static string NoMatchingDeviceFound {
            get {
                return ResourceManager.GetString("NoMatchingDeviceFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested property is out of controller section; probably an issue with the tool..
        /// </summary>
        public static string OutOfControllerSection {
            get {
                return ResourceManager.GetString("OutOfControllerSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Requested property is out of file section; probably a corrupted or incompatible file..
        /// </summary>
        public static string OutOfFileSection {
            get {
                return ResourceManager.GetString("OutOfFileSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The controller and the file differ regarding PD existence (one of them has it and one doesn&apos;t).
        /// </summary>
        public static string PdMismatchError {
            get {
                return ResourceManager.GetString("PdMismatchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReadFirmware function failed.
        /// </summary>
        public static string ReadFirmwareFailed {
            get {
                return ResourceManager.GetString("ReadFirmwareFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while reading an I2C register.
        /// </summary>
        public static string ReadI2CFailed {
            get {
                return ResourceManager.GetString("ReadI2CFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DSL4000 series controllers are not supported by this firmware update tool.
        /// </summary>
        public static string RedwoodNotSupported {
            get {
                return ResourceManager.GetString("RedwoodNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command is not supported on controller in safe mode.
        /// </summary>
        public static string SafeModeError {
            get {
                return ResourceManager.GetString("SafeModeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all Thunderbolt(TM) ports are functioning properly.
        ///Some controller&apos;s information is not available..
        /// </summary>
        public static string SafeModeWarning {
            get {
                return ResourceManager.GetString("SafeModeWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thunderbolt(TM) service doesn&apos;t exist.
        /// </summary>
        public static string ServiceDoesntExist {
            get {
                return ResourceManager.GetString("ServiceDoesntExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thunderbolt(TM) UWD software is not installed.
        ///Please install the Thunderbolt(TM) UWD software and run the tool again..
        /// </summary>
        public static string SWNotInstalled {
            get {
                return ResourceManager.GetString("SWNotInstalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown Thunderbolt(TM) chip..
        /// </summary>
        public static string UnknownChip {
            get {
                return ResourceManager.GetString("UnknownChip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not supported.
        /// </summary>
        public static string UnsuportedOperation {
            get {
                return ResourceManager.GetString("UnsuportedOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Firmware image does not match current hardware: .
        /// </summary>
        public static string ValidationFailedPart1 {
            get {
                return ResourceManager.GetString("ValidationFailedPart1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please supply a valid image file..
        /// </summary>
        public static string ValidationFailedPart2 {
            get {
                return ResourceManager.GetString("ValidationFailedPart2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The image file is for another vendor product.
        /// </summary>
        public static string VendorMismatchError {
            get {
                return ResourceManager.GetString("VendorMismatchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while writing to an I2C register.
        /// </summary>
        public static string WriteI2CFailed {
            get {
                return ResourceManager.GetString("WriteI2CFailed", resourceCulture);
            }
        }
    }
}
